1) Как и в реальной жизни, в ООП родительские и дочерние классы связаны наследственностью. То есть у нас есть родительский класс с самыми общими методами, эти методы наследуются
дочерними классами, дополняясь еще какими-нибудь. Это все нужно для избежания повторений одного и того же кода по несколько раз.
2)Super() позволяет унаследовать метод у более старшего класса, причем при наличии разветвленного "семейного дерева" поиск предка будет осуществляться в ширину.
3) Исключения нужны, потому что при работе с программой пользователь может предоставлять некорректные данные, с которыми программа может зациклиться или вообще остановиться из-за ошибки
(например, если у нас написан калькулятор, а пользователь хочет поделить на 0). При таком раскладе можно прописать исключение и программа даст пользователю по лбу, чтобы он исправил вводимые данные.
4) Обработка исключения происходит по схеме try smth1 -> except error -> else smth2 -> finally smth3. Для своего исключения прописываем raise error (её конкретный вид), либо вообще создаем свою ошибку,
прописывая её в классе

1) ООП расшифровывается так: объектно-ориентированное программирование. Есть также процедурное и функциональное программирование.  
В процедурном программировании команды выполняются по порядку, сплошняком, код может повторяться. В функциональном можно повторяющиеся куски запихать в функции, которые затем можно вызывать там, где надо.
В ООП тоже можно все повторяющиеся куски запихать в структуру (а не повторять их, как в процедурном), выделить классы и объекты. В функциональном объектов и классов нет,
функции просто пишутся, в ООП их можно включить в структуру.
2) Инкапсуляция позволяет разделить интерфейс и внутренность программы, чтобы пользователь не видел всю прогерскую кухню, а только то, что нужно. В питоне это не очень реализовано,
на самом деле, при желании пользователь может залезть внутрь. Чтобы разграничить открытые и закрытые куски кода, можно добавить к переменным нижнее подчеркивание (перед названием),
это будет значить, что данный объект лучше не трогать, не лезь, оно тебя сожрет!!!!
3) Переменные называют атрибутами или полями, а функции -- методами.
4) Конструктор мы не прописываем, он встроен в питон и работает автоматически, выделяя под наши приколдесы память, связывая объекты с переменными и т.п. Как пустая квартира,
которую мы купили у застройщика (питон -- застройщик, мы сами квартиру не делаем). Мы же делаем в этой пустой квартире расстановку мебели, клеим обои и  т.д. -- прописываем инициализатор.
Инициализатор позволяет присвоить данным начальные значения.
